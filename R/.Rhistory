only_twostep = FALSE, rules=zo3, groups=group, show_info = TRUE))
source('D:/gheckmanPackage/MultivariateSwitch/R/GreatRatio.R')
heckmanList$mle$result
rep('',5)
as.table(1:3)
as.table(t(1:3))
tbl=as.table(t(1:3))
rownames(tbl)=NULL
tbl
tbl=as.table(t(1:3))
rownames(tbl)=""
tbl
source('D:/gheckmanPackage/MultivariateSwitch/R/covmatrixReplace.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/d2F.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckman.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanSort.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/GreatRatio.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/mvncond.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/simulation.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/triangular.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanLS.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanLSAdjustCovariance.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/lambdaCalculate.R')
system.time(heckmanList<-gheckman(data=h[condition,],
outcome = log(wage)~
seniority+I(seniority^2)+
log(regionWage)+
Brak+
I(Moscow+Peter)+OblCentr+Gorod+
invalide+
educ3,
selection1 = work~age+
children+Brak+
invalide+
regionWork+
I(Moscow+Peter)+OblCentr+Gorod+
educ3,
selection2 = educ3Treatment~
educ3_father+
educ3_mother+
school1+
marriageAge+
MoscowPeter_school+OblCentr_school+Gorod_school,
only_twostep = FALSE, rules=zo3, groups=group, show_info = TRUE))
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanLikelihood.R')
heckmanList$twostep$model[[1]]
heckmanList$mle$result
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
gheckmanME(heckmanList$sort_list,NA,1,1)
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
gheckmanME(heckmanList$sort_list,NA,1,1)
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
gheckmanME(heckmanList$sort_list,NA,1,1)
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
gheckmanME(heckmanList$sort_list,NA,1,1)
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
gheckmanME(heckmanList$sort_list,NA,1,1)
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
gheckmanME(heckmanList$sort_list,NA,1,1)
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
gheckmanME(heckmanList$sort_list,NA,2,1)
y_predicted=c(gheckmanME(heckmanList$sort_list,NA,1,1),gheckmanME(heckmanList$sort_list,NA,2,1))
predict(heckmanList$twostep$model[[1]])
predict(heckmanList$twostep$twostep_LS[[1]])
y_predicted-predict(heckmanList$twostep$twostep_LS[[1]])
predict(heckmanList$twostep$twostep_LS[[1]])
predict(heckmanList$twostep$twostep_LS[[2]])
predict(heckmanList$twostep$twostep_LS[[1]])
y_predicted=c(gheckmanME(heckmanList$sort_list,NA,1,1),gheckmanME(heckmanList$sort_list,NA,2,1))
predict(heckmanList$twostep$twostep_LS[[1]])
y_predicted=c(gheckmanME(heckmanList$sort_list,NA,1,1),gheckmanME(heckmanList$sort_list,NA,2,1))
y_predict_LS=predict(heckmanList$twostep$twostep_LS[[1]])
cbind(y_predicted,y_predict_LS)
sortList=heckmanList$sortList
sortList
sort_list=heckmanList$sort_list
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
y_predicted=c(gheckmanME(heckmanList$sort_list,NA,1,1),gheckmanME(heckmanList$sort_list,NA,2,1))
y_predict_LS=predict(heckmanList$twostep$twostep_LS[[1]])
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
y_predicted=c(gheckmanME(heckmanList$sort_list,NA,1,1),gheckmanME(heckmanList$sort_list,NA,2,1))
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
y_predicted=c(gheckmanME(heckmanList$sort_list,NA,1,1),gheckmanME(heckmanList$sort_list,NA,2,1))
sort_list$rho_multiply_sigma
sort_list$rho_multiply_sigma[[1]]
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
y_predicted=c(gheckmanME(heckmanList$sort_list,NA,1,1),gheckmanME(heckmanList$sort_list,NA,2,1))
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
y_predicted=c(gheckmanME(heckmanList$sort_list,NA,1,1),gheckmanME(heckmanList$sort_list,NA,2,1))
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
y_predicted=c(gheckmanME(heckmanList$sort_list,NA,1,1),gheckmanME(heckmanList$sort_list,NA,2,1))
y_predict_LS=predict(heckmanList$twostep$twostep_LS[[1]])
cbind(y_predicted,y_predict_LS)
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
y_predicted=c(gheckmanME(heckmanList$sort_list,NA,1,1),gheckmanME(heckmanList$sort_list,NA,2,1))
y_predict_LS=predict(heckmanList$twostep$twostep_LS[[1]])
cbind(y_predicted,y_predict_LS)
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
y_predicted=c(gheckmanME(heckmanList$sort_list,NA,1,1),gheckmanME(heckmanList$sort_list,NA,2,1))
y_predict_LS=predict(heckmanList$twostep$twostep_LS[[1]])
cbind(y_predicted,y_predict_LS)
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
y_predicted=c(gheckmanME(heckmanList$sort_list,NA,1,1),gheckmanME(heckmanList$sort_list,NA,2,1))
y_predict_LS=predict(heckmanList$twostep$twostep_LS[[1]])
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
y_predicted=c(gheckmanME(heckmanList$sort_list,NA,1,1),gheckmanME(heckmanList$sort_list,NA,2,1))
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
y_predicted=c(gheckmanME(heckmanList$sort_list,NA,1,1),gheckmanME(heckmanList$sort_list,NA,2,1))
y_predict_LS=predict(heckmanList$twostep$twostep_LS[[1]])
cbind(y_predicted,y_predict_LS)
sort_list$rho_multiply_sigma[[1]]
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
y_predicted=c(gheckmanME(heckmanList$sort_list,NA,1,1),gheckmanME(heckmanList$sort_list,NA,2,1))
heckmanList$twostep$model[[1]]
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
y_predicted=c(gheckmanME(heckmanList$sort_list,NA,1,1),gheckmanME(heckmanList$sort_list,NA,2,1))
y_predict_LS=predict(heckmanList$twostep$twostep_LS[[1]])
cbind(y_predicted,y_predict_LS)
sort_list$rho_multiply_sigma[[1]]
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
y_predicted=c(gheckmanME(heckmanList$sort_list,NA,1,1),gheckmanME(heckmanList$sort_list,NA,2,1))
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
y_predicted=c(gheckmanME(heckmanList$sort_list,NA,1,1),gheckmanME(heckmanList$sort_list,NA,2,1))
y_predict_LS=predict(heckmanList$twostep$twostep_LS[[1]])
cbind(y_predicted,y_predict_LS)
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
y_predicted=c(gheckmanME(heckmanList$sort_list,NA,1,1),gheckmanME(heckmanList$sort_list,NA,2,1))
y_predict_LS=predict(heckmanList$twostep$twostep_LS[[1]])
cbind(y_predicted,y_predict_LS)
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
y_predicted=c(gheckmanME(heckmanList$sort_list,NA,1,1),gheckmanME(heckmanList$sort_list,NA,2,1))
y_predict_LS=predict(heckmanList$twostep$twostep_LS[[1]])
cbind(y_predicted,y_predict_LS)
group_treatment_index
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
gheckmanME(heckmanList$sort_list,NA,1,1)
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
gheckmanME(sort_list=sort_list,1,1)
library("memisc") # две и более регрессий в одной табличке
library("dplyr") # манипуляции с данными
library("psych") # описательные статистики
library("lmtest") # тестирование гипотез в линейных моделях
library("sjPlot") # графики
library("sgof")
library("ggplot2") # графики
library("xlsx")
library("tseries")
library("broom")
library("knitr")
library("plm")
library("foreign")
library("car")
library("gplots")
library("apsrtable")
library("tseries")
library("ff")
library('sampleSelection') #Heckman test
library('maxLik') #MLE
library('graphics')
library("stargazer")#Latex
library('BaylorEdPsych')
library('rJava')
library("ggplot2")
library("sandwich")
library("mvtnorm")
library('condMVNorm')
library("xlsx")
library('nloptr')
library('mnormt')
library('Matrix')
library('matrixcalc')
library('numDeriv')
library('optimx')
library('memoise')
library('maxLik')
library('GenSA')
library('optimx')
library('BaylorEdPsych')
library('rootSolve')
library('datasets')
library('abind')
library('pbivnorm')
library('sm')
library("devtools")
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
gheckmanME(sort_list=sort_list,1,1);
names(sort_list$y_variables)
colnames(sort_list$y_variables)
sort_list$y_variables
colnames(sort_list$y_variables[[1]])
names(sort_list$y_variables[[1]])
names(sort_list$y)
sort_list$y
names(sort_list$y[[1]])
sort_list$y[[1]]
sort_list$z[[1]]
names(sort_list$z[[1]])
source('D:/gheckmanPackage/MultivariateSwitch/R/covmatrixReplace.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/d2F.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckman.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanLikelihood.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/GreatRatio.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/lambdaCalculate.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/mvncond.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/simulation.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanLS.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanLSAdjustCovariance.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/triangular.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanSort.R')
system.time(heckmanList<-gheckman(data=h[condition,],
outcome = log(wage)~
seniority+I(seniority^2)+
log(regionWage)+
Brak+
I(Moscow+Peter)+OblCentr+Gorod+
invalide+
educ3Treatment,
selection1 = work~age+
children+Brak+
invalide+
regionWork+
I(Moscow+Peter)+OblCentr+Gorod+
educ3,
selection2 = educ3Treatment~
educ3_father+
educ3_mother+
school1+
marriageAge+
MoscowPeter_school+OblCentr_school+Gorod_school,
only_twostep = FALSE, rules=zo3, groups=group, show_info = TRUE))
source('D:/gheckmanPackage/MultivariateSwitch/R/covmatrixReplace.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/d2F.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckman.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanLikelihood.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanSort.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/GreatRatio.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/lambdaCalculate.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/mvncond.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/simulation.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/triangular.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanLS.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanLSAdjustCovariance.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
system.time(heckmanList<-gheckman(data=h[condition,],
outcome = log(wage)~
seniority+I(seniority^2)+
log(regionWage)+
Brak+
I(Moscow+Peter)+OblCentr+Gorod+
invalide+
educ3Treatment,
selection1 = work~age+
children+Brak+
invalide+
regionWork+
I(Moscow+Peter)+OblCentr+Gorod+
educ3,
selection2 = educ3Treatment~
educ3_father+
educ3_mother+
school1+
marriageAge+
MoscowPeter_school+OblCentr_school+Gorod_school,
only_twostep = FALSE, rules=zo3, groups=group, show_info = TRUE))
names(sort_list$z[[1]])
sort_list$z
names(sort_list$z[[1]][1:10,])
sort_list$z[[1]]
sort_list$z[[1]][1:10,]
source('D:/gheckmanPackage/MultivariateSwitch/R/covmatrixReplace.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/d2F.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckman.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanLikelihood.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanSort.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/lambdaCalculate.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/GreatRatio.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/simulation.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/triangular.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/mvncond.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanLS.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanLSAdjustCovariance.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
system.time(heckmanList<-gheckman(data=h[condition,],
outcome = log(wage)~
seniority+I(seniority^2)+
log(regionWage)+
Brak+
I(Moscow+Peter)+OblCentr+Gorod+
invalide+
educ3Treatment,
selection1 = work~age+
children+Brak+
invalide+
regionWork+
I(Moscow+Peter)+OblCentr+Gorod+
educ3,
selection2 = educ3Treatment~
educ3_father+
educ3_mother+
school1+
marriageAge+
MoscowPeter_school+OblCentr_school+Gorod_school,
only_twostep = FALSE, rules=zo3, groups=group, show_info = TRUE))
names(sort_list$y_variables[[1]])
names(sort_list$z[[1]])
sort_list$z
sort_list$z[[1]]
source('D:/gheckmanPackage/MultivariateSwitch/R/covmatrixReplace.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/d2F.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckman.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanLikelihood.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanSort.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/lambdaCalculate.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/mvncond.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/simulation.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/GreatRatio.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/triangular.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanLS.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanLSAdjustCovariance.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
system.time(heckmanList<-gheckman(data=h[condition,],
outcome = log(wage)~
seniority+I(seniority^2)+
log(regionWage)+
Brak+
I(Moscow+Peter)+OblCentr+Gorod+
invalide+
educ3Treatment,
selection1 = work~age+
children+Brak+
invalide+
regionWork+
I(Moscow+Peter)+OblCentr+Gorod+
educ3,
selection2 = educ3Treatment~
educ3_father+
educ3_mother+
school1+
marriageAge+
MoscowPeter_school+OblCentr_school+Gorod_school,
only_twostep = FALSE, rules=zo3, groups=group, show_info = TRUE))
source('D:/gheckmanPackage/MultivariateSwitch/R/covmatrixReplace.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/d2F.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckman.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanLikelihood.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanSort.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/GreatRatio.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/lambdaCalculate.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/mvncond.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/simulation.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/triangular.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanLS.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanLSAdjustCovariance.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
system.time(heckmanList<-gheckman(data=h[condition,],
outcome = log(wage)~
seniority+I(seniority^2)+
log(regionWage)+
Brak+
I(Moscow+Peter)+OblCentr+Gorod+
invalide+
educ3Treatment,
selection1 = work~age+
children+Brak+
invalide+
regionWork+
I(Moscow+Peter)+OblCentr+Gorod+
educ3,
selection2 = educ3Treatment~
educ3_father+
educ3_mother+
school1+
marriageAge+
MoscowPeter_school+OblCentr_school+Gorod_school,
only_twostep = FALSE, rules=zo3, groups=group, show_info = TRUE))
source('D:/gheckmanPackage/MultivariateSwitch/R/covmatrixReplace.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/d2F.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckman.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanLikelihood.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/GreatRatio.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/lambdaCalculate.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/simulation.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/triangular.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanLS.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanLSAdjustCovariance.R')
system.time(heckmanList<-gheckman(data=h[condition,],
outcome = log(wage)~
seniority+I(seniority^2)+
log(regionWage)+
Brak+
I(Moscow+Peter)+OblCentr+Gorod+
invalide+
educ3Treatment,
selection1 = work~age+
children+Brak+
invalide+
regionWork+
I(Moscow+Peter)+OblCentr+Gorod+
educ3,
selection2 = educ3Treatment~
educ3_father+
educ3_mother+
school1+
marriageAge+
MoscowPeter_school+OblCentr_school+Gorod_school,
only_twostep = FALSE, rules=zo3, groups=group, show_info = TRUE))
source('D:/gheckmanPackage/MultivariateSwitch/R/covmatrixReplace.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/d2F.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckman.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanLikelihood.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanSort.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/GreatRatio.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/lambdaCalculate.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/mvncond.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/simulation.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/triangular.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanLS.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanLSAdjustCovariance.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
system.time(heckmanList<-gheckman(data=h[condition,],
outcome = log(wage)~
seniority+I(seniority^2)+
log(regionWage)+
Brak+
I(Moscow+Peter)+OblCentr+Gorod+
invalide+
educ3Treatment,
selection1 = work~age+
children+Brak+
invalide+
regionWork+
I(Moscow+Peter)+OblCentr+Gorod+
educ3,
selection2 = educ3Treatment~
educ3_father+
educ3_mother+
school1+
marriageAge+
MoscowPeter_school+OblCentr_school+Gorod_school,
only_twostep = FALSE, rules=zo3, groups=group, show_info = TRUE))
source('D:/gheckmanPackage/MultivariateSwitch/R/covmatrixReplace.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/d2F.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckman.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanLikelihood.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/GreatRatio.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/lambdaCalculate.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/mvncond.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/triangular.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanSort.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanLS.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/simulation.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanLSAdjustCovariance.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
system.time(heckmanList<-gheckman(data=h[condition,],
outcome = log(wage)~
seniority+I(seniority^2)+
log(regionWage)+
Brak+
I(Moscow+Peter)+OblCentr+Gorod+
invalide+
educ3Treatment,
selection1 = work~age+
children+Brak+
invalide+
regionWork+
I(Moscow+Peter)+OblCentr+Gorod+
educ3,
selection2 = educ3Treatment~
educ3_father+
educ3_mother+
school1+
marriageAge+
MoscowPeter_school+OblCentr_school+Gorod_school,
only_twostep = FALSE, rules=zo3, groups=group, show_info = TRUE))
source('D:/gheckmanPackage/MultivariateSwitch/R/covmatrixReplace.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/d2F.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckman.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanLikelihood.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanSort.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/GreatRatio.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/mvncond.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/simulation.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/triangular.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/lambdaCalculate.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanLS.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanLSAdjustCovariance.R')
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckmanME.R')
system.time(heckmanList<-gheckman(data=h[condition,],
outcome = log(wage)~
seniority+I(seniority^2)+
log(regionWage)+
Brak+
I(Moscow+Peter)+OblCentr+Gorod+
invalide+
educ3Treatment,
selection1 = work~age+
children+Brak+
invalide+
regionWork+
I(Moscow+Peter)+OblCentr+Gorod+
educ3,
selection2 = educ3Treatment~
educ3_father+
educ3_mother+
school1+
marriageAge+
MoscowPeter_school+OblCentr_school+Gorod_school,
only_twostep = FALSE, rules=zo3, groups=group, show_info = TRUE))
