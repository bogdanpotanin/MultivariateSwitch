zo3=matrix(nrow = length(group), ncol = ns);
zo3[1,]=c(1,1);
zo3[2,]=c(1,-1);
zo3[3,]=c(-1,0);
y.index=matrix(list(),2)
y.index[[1]]=c(1,2,3)
z.index=matrix(list(),3)
z.index[[1]]=c(1,2,4)
z.index[[2]]=c(1,4,5)
rho0=0.3;
rhoY=c(-0.7,0.45)
sigma=10
SIGMA=matrix(c(1,rho0,rhoY[1]*sigma, rho0,1,rhoY[2]*sigma, rhoY[1]*sigma,rhoY[2]*sigma,sigma^2),nrow=ns+1,ncol=ns+1)
beta=matrix(list(), ngroup, 1);
beta[[1]]=as.matrix(c(10.1,-11.2,12.3,-13.4));
alpha=matrix(list(), ns, 1);
alpha[[1]]=(as.matrix(c(0.5,-1.1,2.1,-2.2)));
alpha[[2]]=(as.matrix(c(1.5,-1.2,2.2,-3.2)));
h=simulation(n=n, nX=nX, group=group, zo3=zo3, y.index=y.index, z.index=z.index, sigma = SIGMA, beta = beta, alpha = alpha)
data=data.frame(h$y, h$z ,h$X)
colnames(data)=c("y","z1","z2","X1","X2","X3","X4","X5")
library(gheckman)
n=10000
x=NULL
nX=5
group=c(1,0,0)
ns=2
ngroup=length(group)
zo3=matrix(nrow = length(group), ncol = ns);
zo3[1,]=c(1,1);
zo3[2,]=c(1,-1);
zo3[3,]=c(-1,0);
y.index=matrix(list(),2)
y.index[[1]]=c(1,2,3)
z.index=matrix(list(),3)
z.index[[1]]=c(1,2,4)
z.index[[2]]=c(1,4,5)
rho0=0.3;
rhoY=c(-0.7,0.45)
sigma=10
SIGMA=matrix(c(1,rho0,rhoY[1]*sigma, rho0,1,rhoY[2]*sigma, rhoY[1]*sigma,rhoY[2]*sigma,sigma^2),nrow=ns+1,ncol=ns+1)
beta=matrix(list(), ngroup, 1);
beta[[1]]=as.matrix(c(10.1,-11.2,12.3,-13.4));
alpha=matrix(list(), ns, 1);
alpha[[1]]=(as.matrix(c(0.5,-1.1,2.1,-2.2)));
alpha[[2]]=(as.matrix(c(1.5,-1.2,2.2,-3.2)));
h=simulation(n=n, nX=nX, group=group, zo3=zo3, y.index=y.index, z.index=z.index, sigma = SIGMA, beta = beta, alpha = alpha)
data=data.frame(h$y, h$z ,h$X)
colnames(data)=c("y","z1","z2","X1","X2","X3","X4","X5")
zo3=matrix(0,ncol=2,nrow=3)
zo3[1,]=c(-1,0);
zo3[2,]=c(1,1);
zo3[3,]=c(1,-1);
group=c(0,1,0);
library("mvtnorm")
library('nloptr')
library('mnormt')
library('Matrix')
library('matrixcalc')
library('numDeriv')
library('memoise')
library('abind')
library('clusterGeneration')
library('lmtest')
library('pbivnorm')
library('devtools')
options(show.error.locations = TRUE)
install_github("bogdanpotanin/MultivariateSwitchModel")
library(MultivariateSwitch)
n=10000
x=NULL
nX=5
group=c(1,0,0)
ns=2
ngroup=length(group)
zo3=matrix(nrow = length(group), ncol = ns);
zo3[1,]=c(1,1);
zo3[2,]=c(1,-1);
zo3[3,]=c(-1,0);
y.index=matrix(list(),2)
y.index[[1]]=c(1,2,3)
z.index=matrix(list(),3)
z.index[[1]]=c(1,2,4)
z.index[[2]]=c(1,4,5)
rho0=0.3;
rhoY=c(-0.7,0.45)
sigma=10
SIGMA=matrix(c(1,rho0,rhoY[1]*sigma, rho0,1,rhoY[2]*sigma, rhoY[1]*sigma,rhoY[2]*sigma,sigma^2),nrow=ns+1,ncol=ns+1)
beta=matrix(list(), ngroup, 1);
beta[[1]]=as.matrix(c(10.1,-11.2,12.3,-13.4));
alpha=matrix(list(), ns, 1);
alpha[[1]]=(as.matrix(c(0.5,-1.1,2.1,-2.2)));
alpha[[2]]=(as.matrix(c(1.5,-1.2,2.2,-3.2)));
h=simulation(n=n, nX=nX, group=group, zo3=zo3, y.index=y.index, z.index=z.index, sigma = SIGMA, beta = beta, alpha = alpha)
data=data.frame(h$y, h$z ,h$X)
colnames(data)=c("y","z1","z2","X1","X2","X3","X4","X5")
zo3=matrix(0,ncol=2,nrow=3)
zo3[1,]=c(-1,0);
zo3[2,]=c(1,1);
zo3[3,]=c(1,-1);
group=c(0,1,0);
system.time(print(system.time(heckmanList<-gheckman(data=data, outcome=y~X1+X2+X3, selection1=z1~X1+X2+X4, selection2=z2~X1+X4+X5, zo3=zo3, group=group, onlyTwostep = FALSE))))
heckmanList$twostep$model
heckmanList$mle$result
n=100000
x=NULL
nX=5
group=c(1,0,0)
ns=2
ngroup=length(group)
zo3=matrix(nrow = length(group), ncol = ns);
zo3[1,]=c(1,1);
zo3[2,]=c(1,-1);
zo3[3,]=c(-1,0);
y.index=matrix(list(),2)
y.index[[1]]=c(1,2,3)
z.index=matrix(list(),3)
z.index[[1]]=c(1,2,4)
z.index[[2]]=c(1,4,5)
rho0=0.3;
rhoY=c(-0.7,0.45)
sigma=10
SIGMA=matrix(c(1,rho0,rhoY[1]*sigma, rho0,1,rhoY[2]*sigma, rhoY[1]*sigma,rhoY[2]*sigma,sigma^2),nrow=ns+1,ncol=ns+1)
beta=matrix(list(), ngroup, 1);
beta[[1]]=as.matrix(c(10.1,-11.2,12.3,-13.4));
alpha=matrix(list(), ns, 1);
alpha[[1]]=(as.matrix(c(0.5,-1.1,2.1,-2.2)));
alpha[[2]]=(as.matrix(c(1.5,-1.2,2.2,-3.2)));
h=simulation(n=n, nX=nX, group=group, zo3=zo3, y.index=y.index, z.index=z.index, sigma = SIGMA, beta = beta, alpha = alpha)
data=data.frame(h$y, h$z ,h$X)
colnames(data)=c("y","z1","z2","X1","X2","X3","X4","X5")
zo3=matrix(0,ncol=2,nrow=3)
zo3[1,]=c(-1,0);
zo3[2,]=c(1,1);
zo3[3,]=c(1,-1);
group=c(0,1,0);
system.time(print(system.time(heckmanList<-gheckman(data=data, outcome=y~X1+X2+X3, selection1=z1~X1+X2+X4, selection2=z2~X1+X4+X5, zo3=zo3, group=group, onlyTwostep = FALSE))))
heckmanList$mle$result
library("mvtnorm")
library('nloptr')
library('mnormt')
library('Matrix')
library('matrixcalc')
library('numDeriv')
library('memoise')
library('abind')
library('clusterGeneration')
library('lmtest')
library('pbivnorm')
library('devtools')
options(show.error.locations = TRUE)
install_github("bogdanpotanin/MultivariateSwitchModel")
library(MultivariateSwitch)
n=10000
x=NULL
nX=5
group=c(1,0,0)
ns=2
ngroup=length(group)
zo3=matrix(nrow = length(group), ncol = ns);
zo3[1,]=c(1,1);
zo3[2,]=c(1,-1);
zo3[3,]=c(-1,0);
y.index=matrix(list(),2)
y.index[[1]]=c(1,2,3)
z.index=matrix(list(),3)
z.index[[1]]=c(1,2,4)
z.index[[2]]=c(1,4,5)
rho0=0.3;
rhoY=c(-0.7,0.45)
sigma=10
SIGMA=matrix(c(1,rho0,rhoY[1]*sigma, rho0,1,rhoY[2]*sigma, rhoY[1]*sigma,rhoY[2]*sigma,sigma^2),nrow=ns+1,ncol=ns+1)
beta=matrix(list(), ngroup, 1);
beta[[1]]=as.matrix(c(10.1,-11.2,12.3,-13.4));
alpha=matrix(list(), ns, 1);
alpha[[1]]=(as.matrix(c(0.5,-1.1,2.1,-2.2)));
alpha[[2]]=(as.matrix(c(1.5,-1.2,2.2,-3.2)));
h=simulation(n=n, nX=nX, group=group, zo3=zo3, y.index=y.index, z.index=z.index, sigma = SIGMA, beta = beta, alpha = alpha)
data=data.frame(h$y, h$z ,h$X)
colnames(data)=c("y","z1","z2","X1","X2","X3","X4","X5")
zo3=matrix(0,ncol=2,nrow=3)
zo3[1,]=c(-1,0);
zo3[2,]=c(1,1);
zo3[3,]=c(1,-1);
group=c(0,1,0);
system.time(print(system.time(heckmanList<-gheckman(data=data, outcome=y~X1+X2+X3, selection1=z1~X1+X2+X4, selection2=z2~X1+X4+X5, zo3=zo3, group=group, onlyTwostep = FALSE))))
heckmanList$mle$result
help(MultivariateSwitch)
help(‘??MultivariateSwitch’)
MultivariateSwitch
help(MultivariateSwitch)
help(MultivariateSwitch)
help("MultivariateSwitch")
help("MultivariateSwitch")
help("gheckman")
library("mvtnorm")
library('nloptr')
library('mnormt')
library('Matrix')
library('matrixcalc')
library('numDeriv')
library('memoise')
library('abind')
library('clusterGeneration')
library('lmtest')
library('pbivnorm')
library('devtools')
options(show.error.locations = TRUE)
install_github("bogdanpotanin/MultivariateSwitchModel")
library(MultivariateSwitch)
library("mvtnorm")
library('nloptr')
library('mnormt')
library('Matrix')
library('matrixcalc')
library('numDeriv')
library('memoise')
library('abind')
library('clusterGeneration')
library('lmtest')
library('pbivnorm')
library('devtools')
options(show.error.locations = TRUE)
install_github("bogdanpotanin/MultivariateSwitchModel")
library(MultivariateSwitch)
help("gheckman")
options(show.error.locations = TRUE)
install_github("bogdanpotanin/MultivariateSwitchModel")
library(MultivariateSwitch)
help("gheckman")
help("MultivariateSwitch")
install_github("bogdanpotanin/MultivariateSwitchModel")
library(MultivariateSwitch)
help("gheckman")
library("mvtnorm")
library('nloptr')
library('mnormt')
library('Matrix')
library('matrixcalc')
library('numDeriv')
library('memoise')
library('abind')
library('clusterGeneration')
library('lmtest')
library('pbivnorm')
library('devtools')
#git push -u origin master
options(show.error.locations = TRUE)
install_github("bogdanpotanin/MultivariateSwitchModel")
library("mvtnorm")
library('nloptr')
library('mnormt')
library('Matrix')
library('matrixcalc')
library('numDeriv')
library('memoise')
library('abind')
library('clusterGeneration')
library('lmtest')
library('pbivnorm')
library('devtools')
#git push -u origin master
options(show.error.locations = TRUE)
install_github("bogdanpotanin/MultivariateSwitchModel")
library("mvtnorm")
library('nloptr')
library('mnormt')
library('Matrix')
library('matrixcalc')
library('numDeriv')
library('memoise')
library('abind')
library('clusterGeneration')
library('lmtest')
library('pbivnorm')
library('devtools')
#git push -u origin master
options(show.error.locations = TRUE)
install_github("bogdanpotanin/MultivariateSwitchModel")
library(MultivariateSwitch)
help("gheckman")
library("mvtnorm")
library('nloptr')
library('mnormt')
library('Matrix')
library('matrixcalc')
library('numDeriv')
library('memoise')
library('abind')
library('clusterGeneration')
library('lmtest')
library('pbivnorm')
library('devtools')
#git push -u origin master
options(show.error.locations = TRUE)
install_github("bogdanpotanin/MultivariateSwitchModel")
library(MultivariateSwitch)
help("gheckman")
n=10000
x=NULL
nX=5
group=c(1,0,0)
ns=2
ngroup=length(group)
zo3=matrix(nrow = length(group), ncol = ns);
zo3[1,]=c(1,1);
zo3[2,]=c(1,-1);
zo3[3,]=c(-1,0);
y.index=matrix(list(),2)
y.index[[1]]=c(1,2,3)
z.index=matrix(list(),3)
z.index[[1]]=c(1,2,4)
z.index[[2]]=c(1,4,5)
rho0=0.3;
rhoY=c(-0.7,0.45)
sigma=10
SIGMA=matrix(c(1,rho0,rhoY[1]*sigma, rho0,1,rhoY[2]*sigma, rhoY[1]*sigma,rhoY[2]*sigma,sigma^2),nrow=ns+1,ncol=ns+1)
beta=matrix(list(), ngroup, 1);
beta[[1]]=as.matrix(c(10.1,-11.2,12.3,-13.4));
alpha=matrix(list(), ns, 1);
alpha[[1]]=(as.matrix(c(0.5,-1.1,2.1,-2.2)));
alpha[[2]]=(as.matrix(c(1.5,-1.2,2.2,-3.2)));
h=simulation(n=n, nX=nX, group=group, zo3=zo3, y.index=y.index, z.index=z.index, sigma = SIGMA, beta = beta, alpha = alpha)
data=data.frame(h$y, h$z ,h$X)
colnames(data)=c("y","z1","z2","X1","X2","X3","X4","X5")
zo3=matrix(0,ncol=2,nrow=3)
zo3[1,]=c(-1,0);
zo3[2,]=c(1,1);
zo3[3,]=c(1,-1);
group=c(0,1,0);
system.time(print(system.time(heckmanList<-gheckman(data=data, outcome=y~X1+X2+X3, selection1=z1~X1+X2+X4, selection2=z2~X1+X4+X5, zo3=zo3, group=group, onlyTwostep = FALSE))))
library("mvtnorm")
library('nloptr')
library('mnormt')
library('Matrix')
library('matrixcalc')
library('numDeriv')
library('memoise')
library('abind')
library('clusterGeneration')
library('lmtest')
library('pbivnorm')
library('devtools')
#git push -u origin master
options(show.error.locations = TRUE)
install_github("bogdanpotanin/MultivariateSwitchModel")
library(MultivariateSwitch)
help("gheckman")
n=10000
x=NULL
nX=5
group=c(1,0,0)
ns=2
ngroup=length(group)
zo3=matrix(nrow = length(group), ncol = ns);
zo3[1,]=c(1,1);
zo3[2,]=c(1,-1);
zo3[3,]=c(-1,0);
y.index=matrix(list(),2)
y.index[[1]]=c(1,2,3)
z.index=matrix(list(),3)
z.index[[1]]=c(1,2,4)
z.index[[2]]=c(1,4,5)
rho0=0.3;
rhoY=c(-0.7,0.45)
sigma=10
SIGMA=matrix(c(1,rho0,rhoY[1]*sigma, rho0,1,rhoY[2]*sigma, rhoY[1]*sigma,rhoY[2]*sigma,sigma^2),nrow=ns+1,ncol=ns+1)
beta=matrix(list(), ngroup, 1);
beta[[1]]=as.matrix(c(10.1,-11.2,12.3,-13.4));
alpha=matrix(list(), ns, 1);
alpha[[1]]=(as.matrix(c(0.5,-1.1,2.1,-2.2)));
alpha[[2]]=(as.matrix(c(1.5,-1.2,2.2,-3.2)));
h=simulation(n=n, nX=nX, group=group, zo3=zo3, y.index=y.index, z.index=z.index, sigma = SIGMA, beta = beta, alpha = alpha)
data=data.frame(h$y, h$z ,h$X)
colnames(data)=c("y","z1","z2","X1","X2","X3","X4","X5")
zo3=matrix(0,ncol=2,nrow=3)
zo3[1,]=c(-1,0);
zo3[2,]=c(1,1);
zo3[3,]=c(1,-1);
group=c(0,1,0);
system.time(print(system.time(heckmanList<-gheckman(data=data, outcome=y~X1+X2+X3, selection1=z1~X1+X2+X4, selection2=z2~X1+X4+X5, zo3=zo3, group=group, onlyTwostep = FALSE))))
heckmanList$mle$result
data$z1
data$z2
library("mvtnorm")
library('nloptr')
library('mnormt')
library('Matrix')
library('matrixcalc')
library('numDeriv')
library('memoise')
library('abind')
library('clusterGeneration')
library('lmtest')
library('pbivnorm')
library('devtools')
#git push -u origin master
options(show.error.locations = TRUE)
install_github("bogdanpotanin/MultivariateSwitchModel")
library(MultivariateSwitch)
n=10000
x=NULL
nX=5
group=c(1,0,0)
ns=2
ngroup=length(group)
zo3=matrix(nrow = length(group), ncol = ns);
zo3[1,]=c(1,1);
zo3[2,]=c(1,-1);
zo3[3,]=c(-1,0);
y.index=matrix(list(),2)
y.index[[1]]=c(1,2,3)
z.index=matrix(list(),3)
z.index[[1]]=c(1,2,4)
z.index[[2]]=c(1,4,5)
rho0=0.3;
rhoY=c(-0.7,0.45)
sigma=10
SIGMA=matrix(c(1,rho0,rhoY[1]*sigma, rho0,1,rhoY[2]*sigma, rhoY[1]*sigma,rhoY[2]*sigma,sigma^2),nrow=ns+1,ncol=ns+1)
beta=matrix(list(), ngroup, 1);
beta[[1]]=as.matrix(c(10.1,-11.2,12.3,-13.4));
alpha=matrix(list(), ns, 1);
alpha[[1]]=(as.matrix(c(0.5,-1.1,2.1,-2.2)));
alpha[[2]]=(as.matrix(c(1.5,-1.2,2.2,-3.2)));
h=simulation(n=n, nX=nX, group=group, zo3=zo3, y.index=y.index, z.index=z.index, sigma = SIGMA, beta = beta, alpha = alpha)
data=data.frame(h$y, h$z ,h$X)
colnames(data)=c("y","z1","z2","X1","X2","X3","X4","X5")
zo3=matrix(0,ncol=2,nrow=3)
zo3[1,]=c(-1,0);
zo3[2,]=c(1,1);
zo3[3,]=c(1,-1);
group=c(0,1,0);
system.time(print(system.time(heckmanList<-gheckman(data=data, outcome=y~X1+X2+X3, selection1=z1~X1+X2+X4, selection2=z2~X1+X4+X5, zo3=zo3, group=group, onlyTwostep = FALSE, ShowInfo = FALSE))))
heckmanList$mle$result
heckmanList$twostep$model
help(MultivariateSwitch)
help(gheckman)
library(MultivariateSwitch)
help(gheckman)
source('D:/gheckmanPackage/MultivariateSwitch/R/gheckman.R')
library("mvtnorm")
library('nloptr')
library('mnormt')
library('Matrix')
library('matrixcalc')
library('numDeriv')
library('memoise')
library('abind')
library('clusterGeneration')
library('lmtest')
library('pbivnorm')
library('devtools')
#git push -u origin master
options(show.error.locations = TRUE)
install_github("bogdanpotanin/MultivariateSwitchModel")
library(MultivariateSwitch)
help(gheckman)
help(gheckman)
help(MultivariateSwitch)
help(gheckman)
help(MultivariateSwitch:::gheckman)
help(MultivariateSwitch::gheckman)
help(gheckman)
install_github("bogdanpotanin/MultivariateSwitchModel")
library(MultivariateSwitch)
install_github("bogdanpotanin/MultivariateSwitchModel")
library(MultivariateSwitch)
help(gheckman)
install_github("bogdanpotanin/MultivariateSwitchModel")
library(MultivariateSwitch)
help(gheckman)
library(MultivariateSwitch)
help(gheckman)
example(gheckman)
dev_help()(gheckman)
dev_help(gheckman)
help(gheckman)
library("mvtnorm")
library('nloptr')
library('mnormt')
library('Matrix')
library('matrixcalc')
library('numDeriv')
library('memoise')
library('abind')
library('clusterGeneration')
library('lmtest')
library('pbivnorm')
library('devtools')
#git push -u origin master
options(show.error.locations = TRUE)
install_github("bogdanpotanin/MultivariateSwitchModel")
library(MultivariateSwitch)
help(gheckman)
help(gheckman)
library("mvtnorm")
library('nloptr')
library('mnormt')
library('Matrix')
library('matrixcalc')
library('numDeriv')
library('memoise')
library('abind')
library('clusterGeneration')
library('lmtest')
library('pbivnorm')
library('devtools')
#git push -u origin master
options(show.error.locations = TRUE)
install_github("bogdanpotanin/MultivariateSwitchModel")
library(MultivariateSwitch)
help(gheckman)
